{"version":3,"sources":["js/main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","lazyLoadImages","images","querySelectorAll","observer","IntersectionObserver","entries","entry","intersectionRatio","unobserve","target","src","dataset","rootMargin","threshold","image","observe","Array","from","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","setAttribute","title_id","name","replace","Image","className","title","imageSrc","imageUrlForRestaurant","test","div","id","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"../../js/main.js","sourcesContent":["/*global google DBHelper*/\r\nlet restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map\r\nvar markers = []\r\n\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n\r\n    const map = document.getElementById('map');\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map( map, {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n\r\n}\r\nconst lazyLoadImages = () =>{\r\n\r\n    const images = document.querySelectorAll('.restaurant-img');\r\n\r\n    const config = {\r\n    // If the image gets within 50px in the Y axis, start the download.\r\n    rootMargin: '50px 0px',\r\n    threshold: 0.01\r\n    };\r\n    if (!('IntersectionObserver' in window)) {\r\n        Array.from(images).forEach(image => image.src=image.dataset.src);\r\n    } else {\r\n        // The observer for the images on the page\r\n        let observer = new IntersectionObserver((entries)=> {\r\n            // Loop through the entries\r\n            entries.forEach(entry => {\r\n              // Are we in viewport?\r\n              if (entry.intersectionRatio > 0) {\r\n          \r\n                // Stop watching and load the image\r\n                observer.unobserve(entry.target);\r\n                entry.target.src=entry.target.dataset.src;\r\n              }\r\n            });\r\n        }, config);\r\n      \r\n        \r\n        images.forEach(image => {\r\n            observer.observe(image);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    lazyLoadImages();\r\n    addMarkersToMap();\r\n    \r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute('role', 'listitem');\r\n    li.setAttribute('tabindex', '0');\r\n\r\n    const title_id = `li_title_${restaurant.name.replace(/\\s/g,'_')}`;\r\n\r\n    li.setAttribute('aria-labelledby', title_id);\r\n    const image = new Image(); //document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.setAttribute('alt', `This is a representative image of the restaurant ${restaurant.name}`);\r\n    image.setAttribute('tabindex', '0');\r\n    image.title = `${restaurant.name}`;\r\n\r\n    const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n    if (/\\.svg$/.test(imageSrc)){    \r\n        image.dataset.src = imageSrc;\r\n    }else{\r\n        image.dataset.src = `${imageSrc}-small.jpg`;\r\n    }\r\n   \r\n    li.append(image);\r\n    const div = document.createElement('div');\r\n    div.className = 'restaurant-description';\r\n    const name = document.createElement('h2');\r\n    name.id = title_id;\r\n    name.innerHTML = restaurant.name;\r\n    div.append(name)\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    div.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    div.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    div.append(more);\r\n\r\n    li.append(div);\r\n\r\n    return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url;\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"]}