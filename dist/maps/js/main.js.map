{"version":3,"sources":["js/main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","window","initMap","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","setAttribute","title_id","name","replace","image","Image","className","title","src","imageSrc","imageUrlForRestaurant","test","setTimeout","getAttribute","onload","removeAttribute","div","id","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"../../js/main.js","sourcesContent":["/*global google DBHelper*/\r\nlet restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map\r\nvar markers = []\r\n\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute('role', 'listitem');\r\n    li.setAttribute('tabindex', '0');\r\n\r\n    const title_id = `li_title_${restaurant.name.replace(/\\s/g,'_')}`;\r\n\r\n    li.setAttribute('aria-labelledby', title_id);\r\n    const image = new Image(); //document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.setAttribute('alt', `This is a representative image of the restaurant ${restaurant.name}`);\r\n    image.setAttribute('tabindex', '0');\r\n    image.title = `${restaurant.name}`;\r\n    image.src = 'img/Map_placeholder.svg';\r\n    const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n    if (!/\\.svg$/.test(imageSrc)){    \r\n        image.setAttribute('data-src', `${imageSrc}-small.jpg`);\r\n        setTimeout(()=>{\r\n                image.setAttribute('src', image.getAttribute('data-src'));\r\n                image.onload = function() {\r\n                   image.removeAttribute('data-src');\r\n                };\r\n            },100)\r\n    }\r\n   \r\n    li.append(image);\r\n    const div = document.createElement('div');\r\n    div.className = 'restaurant-description';\r\n    const name = document.createElement('h2');\r\n    name.id = title_id;\r\n    name.innerHTML = restaurant.name;\r\n    div.append(name)\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    div.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    div.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    div.append(more);\r\n\r\n    li.append(div);\r\n\r\n    return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url;\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"]}