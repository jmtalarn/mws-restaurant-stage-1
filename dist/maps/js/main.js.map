{"version":3,"names":[],"mappings":"","sources":["js/main.js"],"sourcesContent":["/*global google DBHelper */\r\nlet restaurants,\r\n    neighborhoods,\r\n    cuisines;\r\nvar map\r\nvar markers = []\r\n \r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.getNeighborhoods()\r\n        .then(neighborhoods => {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }).catch(error=> console.error(error));\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n\r\n    DBHelper.getCuisines()\r\n        .then(cuisines => {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }).catch(error=> console.error(error));\r\n\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n\r\n    const map = document.getElementById('map');\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map( map, {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    updateRestaurants();\r\n\r\n}\r\nconst lazyLoadImages = () =>{\r\n\r\n    const images = document.querySelectorAll('.restaurant-img');\r\n\r\n    const config = {\r\n    // If the image gets within 50px in the Y axis, start the download.\r\n    rootMargin: '50px 0px',\r\n    threshold: 0.01\r\n    };\r\n    if (!('IntersectionObserver' in window)) {\r\n        Array.from(images).forEach(image => image.src=image.dataset.src);\r\n    } else {\r\n        // The observer for the images on the page\r\n        let observer = new IntersectionObserver((entries)=> {\r\n            // Loop through the entries\r\n            entries.forEach(entry => {\r\n              // Are we in viewport?\r\n              if (entry.intersectionRatio > 0) {\r\n          \r\n                // Stop watching and load the image\r\n                observer.unobserve(entry.target);\r\n                entry.target.src=entry.target.dataset.src;\r\n              }\r\n            });\r\n        }, config);\r\n      \r\n        \r\n        images.forEach(image => {\r\n            observer.observe(image);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.getRestaurantsByCuisineAndNeighborhood(cuisine, neighborhood)\r\n        .then(restaurants=>{\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        })\r\n        .catch(error=>console.error)\r\n    \r\n        \r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    lazyLoadImages();\r\n    addMarkersToMap();\r\n    \r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute('role', 'listitem');\r\n    li.setAttribute('tabindex', '0');\r\n\r\n    const title_id = `li_title_${restaurant.name.replace(/\\s/g,'_')}`;\r\n\r\n    li.setAttribute('aria-labelledby', title_id);\r\n    const image = new Image(); //document.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.setAttribute('alt', `This is a representative image of the restaurant ${restaurant.name}`);\r\n    image.setAttribute('tabindex', '0');\r\n    image.title = `${restaurant.name}`;\r\n\r\n    const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n    if (/\\.svg$/.test(imageSrc)){    \r\n        image.dataset.src = imageSrc;\r\n    }else{\r\n        image.dataset.src = `${imageSrc.replace('\\.webp$','-small.webp')}`;\r\n    }\r\n    image.onerror = ()=>{ this.onerror=null; this.src=this.src.replace(\"\\.webp$\",\"jpg\") }\r\n    li.append(image);\r\n    const div = document.createElement('div');\r\n    div.className = 'restaurant-description';\r\n    const name = document.createElement('h2');\r\n    name.id = title_id;\r\n    name.innerHTML = restaurant.name;\r\n    div.append(name)\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    div.append(neighborhood);\r\n\r\n    const address = document.createElement('p');\r\n    address.innerHTML = restaurant.address;\r\n    div.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    div.append(more);\r\n\r\n    li.append(div);\r\n\r\n    return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url;\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}"],"file":"../../js/main.js"}