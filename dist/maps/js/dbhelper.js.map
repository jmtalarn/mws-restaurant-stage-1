{"version":3,"sources":["js/dbhelper.js"],"names":["DBHelper","RESTAURANTS","dbPromise","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","unique","then","db","fetch","response","ok","Error","code","status","message","statusText","json","tx","transaction","forEach","restaurant","objectStore","put","complete","t","console","log","getAllRestaurants","getAll","getRestaurantById","id","get","getCuisines","keys","Set","index","openKeyCursor","cursorKeyIterate","cursor","add","key","continue","Array","from","getNeighborhoods","getRestaurantsByCuisine","cuisine","restaurants","openCursor","IDBKeyRange","only","cursorIterate","push","value","getRestaurantsByNeighborhood","neighborhood","getRestaurantsByCuisineAndNeighborhood","this","mapMarkerForRestaurant","map","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","imageUrlForRestaurant","photograph"],"mappings":"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","file":"../../js/dbhelper.js","sourcesContent":["/*global google*/\r\n/**\r\n * Common database helper functions.\r\n */\r\nDBHelper = (function () {\r\n\r\n    const port = 1337; // Change this to your server port\r\n    const DATABASE_URL = `http://localhost:${port}/restaurants/`;\r\n    const DB_NAME = `restaurant-reviews`;\r\n    const RESTAURANTS = `restaurants`;\r\n\r\n    dbPromise = idb.open(DB_NAME, 1, (upgradeDb) => {\r\n        var store = upgradeDb.createObjectStore(RESTAURANTS, {\r\n            keyPath: 'id'\r\n        });\r\n        store.createIndex('by-cuisine', 'cuisine_type', {\r\n            unique: false\r\n        });\r\n        store.createIndex('by-neighborhood', 'neighborhood', {\r\n            unique: false\r\n        });\r\n        store.createIndex('by-neighborhood-cuisine', ['neighborhood', 'cuisine_type'], {\r\n            unique: false\r\n        });\r\n\r\n\r\n    });\r\n    dbPromise.then(db => {\r\n\r\n        fetch(DATABASE_URL)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error({\r\n                        code: response.status,\r\n                        message: response.statusText\r\n                    });\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(json => {\r\n                const tx = db.transaction(RESTAURANTS, 'readwrite');\r\n                json.forEach(restaurant => {\r\n                    tx.objectStore(RESTAURANTS).put(restaurant)\r\n                });\r\n                return tx.complete;\r\n\r\n            }).then(t => console.log(\"Loaded restaurants data\"))\r\n\r\n    });\r\n    return {\r\n        getAllRestaurants: () => {\r\n            return dbPromise.then(db => {\r\n                return db.transaction(RESTAURANTS)\r\n                    .objectStore(RESTAURANTS).getAll();\r\n            });\r\n        },\r\n        getRestaurantById: (id) => {\r\n            return dbPromise.then(db => {\r\n                return db.transaction(RESTAURANTS)\r\n                    .objectStore(RESTAURANTS).get(id);\r\n            });\r\n        },\r\n        getCuisines: () => {\r\n            let keys = new Set();\r\n            return dbPromise\r\n                .then(db => db.transaction(RESTAURANTS)\r\n                    .objectStore(RESTAURANTS)\r\n                    .index('by-cuisine')\r\n                    .openKeyCursor()\r\n                    .then(function cursorKeyIterate(cursor) {\r\n                        if (!cursor) return;\r\n                        keys.add(cursor.key);\r\n                        return cursor.continue().then(cursorKeyIterate);\r\n                    })).then(() => {\r\n                    return Array.from(keys);\r\n                });\r\n        },\r\n\r\n        getNeighborhoods: () => {\r\n            let keys = new Set();\r\n            return dbPromise\r\n                .then(db => db.transaction(RESTAURANTS)\r\n                    .objectStore(RESTAURANTS)\r\n                    .index('by-neighborhood')\r\n                    .openKeyCursor()\r\n                    .then(function cursorKeyIterate(cursor) {\r\n                        if (!cursor) return;\r\n                        keys.add(cursor.key);\r\n                        return cursor.continue().then(cursorKeyIterate);\r\n                    })).then(() => {\r\n                    return Array.from(keys)\r\n                });\r\n\r\n        },\r\n        getRestaurantsByCuisine: (cuisine) => {\r\n            var restaurants = [];\r\n            return dbPromise\r\n                .then(db => {\r\n                    return db.transaction(RESTAURANTS)\r\n                        .objectStore(RESTAURANTS)\r\n                        .index('by-cuisine').openCursor(IDBKeyRange.only(cuisine)).then(function cursorIterate(cursor) {\r\n                            if (!cursor) return;\r\n                            restaurants.push(cursor.value);\r\n                            return cursor.continue().then(cursorIterate);\r\n                        }).then(() => {\r\n                            return restaurants;\r\n                        })\r\n                });\r\n        },\r\n        getRestaurantsByNeighborhood: (neighborhood) => {\r\n            var restaurants = [];\r\n            return dbPromise\r\n                .then(db => {\r\n                    return db.transaction(RESTAURANTS)\r\n                        .objectStore(RESTAURANTS)\r\n                        .index('by-neighborhood')\r\n                        .openCursor(IDBKeyRange.only(neighborhood))\r\n                        .then(function cursorIterate(cursor) {\r\n                            if (!cursor) return;\r\n                            restaurants.push(cursor.value);\r\n                            return cursor.continue().then(cursorIterate);\r\n                        }).then(() => {\r\n                            return restaurants;\r\n                        })\r\n                });\r\n        },\r\n\r\n        getRestaurantsByCuisineAndNeighborhood: (cuisine, neighborhood) => {\r\n            if (cuisine === 'all' && neighborhood === 'all') {\r\n                return this.DBHelper.getAllRestaurants();\r\n            } else if (cuisine === 'all' && neighborhood !== 'all') {\r\n                return this.DBHelper.getRestaurantsByNeighborhood(neighborhood);\r\n            } else if (cuisine !== 'all' && neighborhood === 'all') {\r\n                return this.DBHelper.getRestaurantsByCuisine(cuisine);\r\n            } else {\r\n                return dbPromise.then(db => {\r\n                    var restaurants = [];\r\n                    return db.transaction(RESTAURANTS)\r\n                        .objectStore(RESTAURANTS)\r\n                        .index('by-neighborhood-cuisine')\r\n                        .openCursor(IDBKeyRange.only([neighborhood, cuisine]))\r\n                        .then(function cursorIterate(cursor) {\r\n                            if (!cursor) return;\r\n                            restaurants.push(cursor.value);\r\n                            return cursor.continue().then(cursorIterate);\r\n                        }).then(() => {\r\n                            return restaurants;\r\n                        })\r\n                })\r\n            }\r\n        },\r\n        /**\r\n         * Map marker for a restaurant.\r\n         */\r\n        mapMarkerForRestaurant: (restaurant, map) => {\r\n            const marker = new google.maps.Marker({\r\n                position: restaurant.latlng,\r\n                title: restaurant.name,\r\n                url: DBHelper.urlForRestaurant(restaurant),\r\n                map: map,\r\n                animation: google.maps.Animation.DROP\r\n            });\r\n            return marker;\r\n        },\r\n        urlForRestaurant: (restaurant) => (\r\n            `./restaurant.html?id=${restaurant.id}`\r\n        ),\r\n        imageUrlForRestaurant: (restaurant) => (\r\n            restaurant.photograph ? `/img/${restaurant.photograph}.webp` : '/img/Map_placeholder.svg'\r\n        )\r\n\r\n\r\n    }\r\n\r\n})();"]}