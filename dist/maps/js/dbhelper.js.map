{"version":3,"sources":["js/dbhelper.js"],"names":["DBHelper","DATABASE_URL","[object Object]","callback","fetch","then","response","ok","Error","code","status","message","statusText","json","catch","err","id","cuisine","fetchRestaurants","error","restaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","restaurant","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"MAIMA,SAMFC,0BAEI,MAAO,qCAMXC,wBAAwBC,GACpBC,MAAMJ,SAASC,cACVI,KAAKC,IACF,IAAKA,EAASC,GACV,MAAMC,OAAOC,KAAMH,EAASI,OAAQC,QAASL,EAASM,aAE1D,OAAON,EAASO,SACnBR,KAAKQ,GAAQV,EAAS,KAAMU,IAC5BC,MAAMC,GAAOZ,wCAA+CY,EAAIN,SAASM,EAAIJ,UAAU,OAMhGT,2BAA2Bc,EAAIb,GAC3BC,SAASJ,SAASC,eAAee,KAC5BX,KAAKC,IACF,IAAKA,EAASC,GACV,MAAMC,OAAOC,KAAMH,EAASI,OAAQC,QAASL,EAASM,aAE1D,OAAON,EAASO,SACnBR,KAAKQ,GAAQV,EAAS,KAAMU,IAC5BC,MAAMC,GAAOZ,wDAA+DY,EAAIN,SAASM,EAAIJ,UAAU,OAOhHT,gCAAgCe,EAASd,GAErCH,SAASkB,iBAAiB,CAACC,EAAOC,KAC9B,GAAID,EACAhB,EAASgB,EAAO,UACb,CAEH,MAAME,EAAUD,EAAYE,OAAOC,GAAKA,EAAEC,cAAgBP,GAC1Dd,EAAS,KAAMkB,MAQ3BnB,qCAAqCuB,EAActB,GAE/CH,SAASkB,iBAAiB,CAACC,EAAOC,KAC9B,GAAID,EACAhB,EAASgB,EAAO,UACb,CAEH,MAAME,EAAUD,EAAYE,OAAOC,GAAKA,EAAEE,cAAgBA,GAC1DtB,EAAS,KAAMkB,MAQ3BnB,+CAA+Ce,EAASQ,EAActB,GAElEH,SAASkB,iBAAiB,CAACC,EAAOC,KAC9B,GAAID,EACAhB,EAASgB,EAAO,UACb,CACH,IAAIE,EAAUD,EACC,OAAXH,IACAI,EAAUA,EAAQC,OAAOC,GAAKA,EAAEC,cAAgBP,IAEhC,OAAhBQ,IACAJ,EAAUA,EAAQC,OAAOC,GAAKA,EAAEE,cAAgBA,IAEpDtB,EAAS,KAAMkB,MAQ3BnB,0BAA0BC,GAEtBH,SAASkB,iBAAiB,CAACC,EAAOC,KAC9B,GAAID,EACAhB,EAASgB,EAAO,UACb,CAEH,MAAMO,EAAgBN,EAAYO,IAAI,CAACC,EAAGC,IAAMT,EAAYS,GAAGJ,cAEzDK,EAAsBJ,EAAcJ,OAAO,CAACM,EAAGC,IAAMH,EAAcK,QAAQH,IAAMC,GACvF1B,EAAS,KAAM2B,MAQ3B5B,qBAAqBC,GAEjBH,SAASkB,iBAAiB,CAACC,EAAOC,KAC9B,GAAID,EACAhB,EAASgB,EAAO,UACb,CAEH,MAAMa,EAAWZ,EAAYO,IAAI,CAACC,EAAGC,IAAMT,EAAYS,GAAGL,cAEpDS,EAAiBD,EAASV,OAAO,CAACM,EAAGC,IAAMG,EAASD,QAAQH,IAAMC,GACxE1B,EAAS,KAAM8B,MAQ3B/B,wBAAwBgC,GACpB,8BAAgCA,EAAWlB,KAM/Cd,6BAA6BgC,GACzB,OAAIA,EAAWC,mBACKD,EAAWC,kBAExB,2BAMXjC,8BAA8BgC,EAAYP,GAQtC,OAPe,IAAIS,OAAOC,KAAKC,QAC3BC,SAAUL,EAAWM,OACrBC,MAAOP,EAAWQ,KAClBC,IAAK3C,SAAS4C,iBAAiBV,GAC/BP,IAAKA,EACLkB,UAAWT,OAAOC,KAAKS,UAAUC","file":"../../js/dbhelper.js","sourcesContent":["/*global google*/\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants/`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL)\r\n            .then(response=>{\r\n                if (!response.ok){\r\n                    throw Error({code: response.status, message: response.statusText});\r\n                }\r\n                return response.json();})\r\n            .then(json => callback(null, json))\r\n            .catch(err => callback(`Request failed. Returned status of ${err.code}. ${err.message}`,null) );\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(`${DBHelper.DATABASE_URL}${id}`)\r\n            .then(response=>{\r\n                if (!response.ok){\r\n                    throw Error({code: response.status, message: response.statusText});\r\n                }\r\n                return response.json();})\r\n            .then(json => callback(null, json))\r\n            .catch(err => callback(`Restaurant info doesn't exists. Returned status of ${err.code}. ${err.message}`,null) );\r\n    \r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants;\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        if (restaurant.photograph){\r\n            return (`/img/${restaurant.photograph}.webp`);\r\n        }\r\n        return ('/img/Map_placeholder.svg');\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP}\r\n        );\r\n        return marker;\r\n    }\r\n\r\n}\r\n"]}