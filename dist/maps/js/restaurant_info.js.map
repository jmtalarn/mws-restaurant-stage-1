{"version":3,"sources":["js/restaurant_info.js"],"names":["restaurant","map","window","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","name","address","image","setAttribute","title","className","imageSrc","imageUrlForRestaurant","test","sizes","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","forEach","review","createReviewHTML","li","classList","add","date","rating","comments","breadcrumb","a","href","url","location","replace","results","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"../../js/restaurant_info.js","sourcesContent":["/*global google DBHelper*/\r\nlet restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        const error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.setAttribute('alt',`This is a representative image of the restaurant ${restaurant.name}`);\r\n    image.title=`${restaurant.name}`;\r\n    image.className = 'restaurant-img';\r\n    const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n \r\n    if (!/\\.svg$/.test(imageSrc)){\r\n        image.setAttribute('src' ,imageSrc); \r\n        image.setAttribute('srcset', `${imageSrc}-small.jpg 320w,\r\n                                        ${imageSrc}-medium.jpg 640w,\r\n                                        ${imageSrc}.jpg 800w`);\r\n\r\n        image.sizes = '(max-width: 800px) 100vw, 800px';\r\n    }\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute('tabindex','0');\r\n    \r\n    const name = document.createElement('p');\r\n    name.classList.add('name');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('p');\r\n    date.classList.add('date');\r\n    date.innerHTML = review.date;\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    rating.classList.add('rating');\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    const a = document.createElement('a');\r\n    \r\n    a.setAttribute('disabled','disabled');\r\n    a.innerHTML = restaurant.name;\r\n    a.href='#';\r\n    a.setAttribute('aria-current','page');\r\n\r\n    li.appendChild(a);\r\n    \r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[[]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}