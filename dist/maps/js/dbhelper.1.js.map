{"version":3,"sources":["js/dbhelper.1.js"],"names":["DBHelper1","[object Object]","fetch","DATABASE_URL","then","response","ok","Error","code","status","message","statusText","json","this","dbPromise","idb","open","DB_NAME","upgradeDb","store","createObjectStore","RESTAURANTS","keyPath","console","log","createIndex","unique","db","tx","transaction","forEach","restaurant","objectStore","put","complete","getAll","id","get","index","getAllKeys","x","Array","from","Set","cuisine","restaurants","openCursor","IDBKeyRange","only","cursorIterate","cursor","value","push","continue","neighborhood","getAllRestaurants","filter","cuisine_type","photograph","map","google","maps","Marker","position","latlng","title","name","url","DBHelper","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"../../js/dbhelper.1.js","sourcesContent":["/*global google*/\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper1 {\r\n\r\n\r\n\r\n    constructor() {\r\n        fetch(DBHelper1.DATABASE_URL)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error({\r\n                        code: response.status,\r\n                        message: response.statusText\r\n                    });\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(json => {\r\n                this.dbPromise = idb.open(DBHelper1.DB_NAME, 1, (upgradeDb) => {\r\n                    var store = upgradeDb.createObjectStore(DBHelper1.RESTAURANTS, {\r\n                        keyPath: 'id'\r\n                    });\r\n                    console.log(\"****************************\");\r\n                    console.log(store);\r\n                    store.createIndex('by-cuisine', 'cuisine_type', {\r\n                        unique: false\r\n                    });\r\n                    store.createIndex('by-neighborhood', 'neighborhood', {\r\n                        unique: false\r\n                    });\r\n                    console.log(\"ALL CREATED\", store);\r\n                });\r\n                this.dbPromise.then(db => {\r\n                    const tx = db.transaction(DBHelper1.RESTAURANTS, 'readwrite');\r\n                    json.forEach(restaurant => tx.objectStore(DBHelper1.RESTAURANTS).put(restaurant));\r\n                    return tx.complete;\r\n\r\n                })\r\n\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337; // Change this to your server port\r\n        return `http://localhost:${port}/restaurants/`;\r\n    }\r\n    static get DB_NAME() {\r\n        return `restaurant-reviews`;\r\n    }\r\n    static get RESTAURANTS() {\r\n        return `restaurants`;\r\n    }\r\n\r\n    getAllRestaurants() {\r\n        return this.dbPromise.then(db => {\r\n            return db.transaction(DBHelper1.RESTAURANTS)\r\n                .objectStore(DBHelper1.RESTAURANTS).getAll();\r\n        });\r\n    }\r\n    getRestaurantById(id) {\r\n        return this.dbPromise.then(db => {\r\n            return db.transaction(DBHelper1.RESTAURANTS)\r\n                .objectStore(DBHelper1.RESTAURANTS).get(id);\r\n        });\r\n    }\r\n\r\n    getCuisines() {\r\n        return this.dbPromise\r\n            .then(db => {\r\n                return db.transaction(DBHelper1.RESTAURANTS)\r\n                    .objectStore(DBHelper1.RESTAURANTS)\r\n                    .index('by-cuisine').getAllKeys().then(x => Array.from(new Set(x)))\r\n            })\r\n    };\r\n\r\n    getNeighborhoods() {\r\n        return this.dbPromise\r\n            .then(db => {\r\n                return db.transaction(DBHelper1.RESTAURANTS)\r\n                    .objectStore(DBHelper1.RESTAURANTS)\r\n                    .index('by-neighborhood').getAllKeys().then(x => Array.from(new Set(x)))\r\n            })\r\n    }\r\n    getRestaurantsByCuisine(cuisine) {\r\n        return this.dbPromise\r\n            .then(db => {\r\n                var restaurants = [];\r\n                db.transaction(DBHelper1.RESTAURANTS)\r\n                    .objectStore(DBHelper1.RESTAURANTS)\r\n                    .index('by-cuisine').openCursor(IDBKeyRange.only(cuisine)).then(function cursorIterate(cursor) {\r\n                        if (!cursor) return;\r\n                        console.log(cursor.value);\r\n                        restaurants.push(cursor.value);\r\n                        return cursor.continue().then(cursorIterate);\r\n                    });\r\n                return restaurants;\r\n            });\r\n    }\r\n    getRestaurantsByNeighborhood(neighborhood) {\r\n        return this.dbPromise\r\n            .then(db => {\r\n                var restaurants = [];\r\n                db.transaction(DBHelper1.RESTAURANTS)\r\n                    .objectStore(DBHelper1.RESTAURANTS)\r\n                    .index('by-neighborhood').openCursor(IDBKeyRange.only(cuisine)).then(function cursorIterate(cursor) {\r\n                        if (!cursor) return;\r\n                        console.log(cursor.value);\r\n                        restaurants.push(cursor.value);\r\n                        return cursor.continue().then(cursorIterate);\r\n                    });\r\n                return restaurants;\r\n            });\r\n    }\r\n\r\n    getRestaurantsByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n        return this.getAllRestaurants()\r\n            .then(restaurants =>\r\n                restaurants.filter(x => x.cuisine_type === cuisine && x.neighborhood === neighborhood))\r\n    };\r\n\r\n       /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        if (restaurant.photograph){\r\n            return (`/img/${restaurant.photograph}.webp`);\r\n        }\r\n        return ('/img/Map_placeholder.svg');\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP}\r\n        );\r\n        return marker;\r\n    }\r\n\r\n\r\n\r\n}"]}